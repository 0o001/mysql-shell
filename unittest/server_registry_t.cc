/* Copyright (c) 2014, 2015, Oracle and/or its affiliates. All rights reserved.

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; version 2 of the License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA */

#include "gtest/gtest.h"
#include "shellcore/server_registry.h"
#include "utils/utils_file.h"

#include <stdexcept>

namespace shcore {
  namespace server_registry_tests
  {
    TEST(Server_registry_test, merge_file)
    {
      //const std::string file = Server_registry::get_default_config_path();
      const std::string file = "sample.json";
      shcore::delete_file(file);
      Server_registry* sr = new Server_registry(file);
      // this combination of uuid & password values, produces a salted password with '\0' in it. Also extra semicolons at end to test another corner case.
      Connection_options cs = sr->add_connection_options("8ab125f8-9678-d011-9c41-f816549b70d4", "protocol=mysql; app=dev_connection; server=localhost; port=3305; user=root; password=123; custom1=my custom value;;");
      // another way to add the connection, with autogenerated uuid.
      Connection_options cs2 = sr->add_connection_options("server=192.168.56.20; port=3306; user=admin; password=456; protocol=mysqlx; app=app1");
      // this saves the file in app data/mysql/mysqlx/.mysql_server_registry.cnf for windows
      // or $HOME/mysqlx/.mysql_server_registry.cnf for Linux

      sr->merge();
      delete sr;

      Server_registry* sr2 = new Server_registry(file);

      Connection_options cs_bis = sr2->get_connection_options(cs.get_uuid());
      EXPECT_STREQ(cs_bis.get_server().c_str(), "localhost");
      EXPECT_STREQ(cs_bis.get_name().c_str(), "dev_connection");
      EXPECT_STREQ(cs_bis.get_password().c_str(), "123");
      EXPECT_STREQ(cs_bis.get_user().c_str(), "root");
      EXPECT_STREQ(cs_bis.get_port().c_str(), "3305");
      EXPECT_STREQ(cs_bis.get_protocol().c_str(), "mysql");
      EXPECT_STREQ(cs_bis.get_value("custom1").c_str(), "my custom value");

      //Connection_options cs2_bis = sr2->get_connection_options(cs2.get_uuid());
      Connection_options cs2_bis = sr2->get_connection_by_name("app1");
      EXPECT_STREQ(cs2_bis.get_server().c_str(), "192.168.56.20");
      EXPECT_STREQ(cs2_bis.get_port().c_str(), "3306");
      EXPECT_STREQ(cs2_bis.get_user().c_str(), "admin");
      EXPECT_STREQ(cs2_bis.get_password().c_str(), "456");
      EXPECT_STREQ(cs2_bis.get_protocol().c_str(), "mysqlx");
      EXPECT_STREQ(cs2_bis.get_name().c_str(), "app1");

      // Iterator of connections
      for (std::map<std::string, Connection_options>::const_iterator it = sr2->begin(); it != sr2->end(); ++it)
      {
        const Connection_options& csi = it->second;
        if (csi.get_uuid() == "8ab125f8-9678-d011-9c41-f816549b70d4")
        {
          EXPECT_STREQ(csi.get_server().c_str(), "localhost");
          EXPECT_STREQ(csi.get_name().c_str(), "dev_connection");
          EXPECT_STREQ(csi.get_password().c_str(), "123");
          EXPECT_STREQ(csi.get_user().c_str(), "root");
          EXPECT_STREQ(csi.get_port().c_str(), "3305");
          EXPECT_STREQ(csi.get_protocol().c_str(), "mysql");
          EXPECT_STREQ(csi.get_value("custom1").c_str(), "my custom value");
        }
        else
        {
          EXPECT_STREQ(csi.get_server().c_str(), "192.168.56.20");
          EXPECT_STREQ(csi.get_port().c_str(), "3306");
          EXPECT_STREQ(csi.get_user().c_str(), "admin");
          EXPECT_STREQ(csi.get_password().c_str(), "456");
          EXPECT_STREQ(csi.get_protocol().c_str(), "mysqlx");
          EXPECT_STREQ(csi.get_name().c_str(), "app1");
        }
      }

      delete sr2;
    }

    TEST(Server_registry_test, other_merge)
    {
      Server_registry* sr = new Server_registry("sample.json");
      // This combination of uuid & password produces a password ending with \\\\\" (two backslashes, the delimiter double quote (another parser corner case).
      Connection_options cs2 = sr->add_connection_options("713a9e8b-9883-d011-cc06-f816549b70d4", "server=192.168.56.20; port=3306; user=admin; password=456; protocol=mysqlx; app=app2");

      sr->merge();
      delete sr;

      Server_registry* sr2 = new Server_registry("sample.json");

      Connection_options cs2_bis = sr2->get_connection_options(cs2.get_uuid());
      EXPECT_STREQ(cs2_bis.get_server().c_str(), "192.168.56.20");
      EXPECT_STREQ(cs2_bis.get_port().c_str(), "3306");
      EXPECT_STREQ(cs2_bis.get_user().c_str(), "admin");
      EXPECT_STREQ(cs2_bis.get_password().c_str(), "456");
      EXPECT_STREQ(cs2_bis.get_protocol().c_str(), "mysqlx");
      EXPECT_STREQ(cs2_bis.get_name().c_str(), "app2");

      delete sr2;
    }
  }
}